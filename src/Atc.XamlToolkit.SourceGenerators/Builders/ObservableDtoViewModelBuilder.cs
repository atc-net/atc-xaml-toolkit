namespace Atc.XamlToolkit.SourceGenerators.Builders;

internal sealed class ObservableDtoViewModelBuilder : BuilderBase
{
    public void GenerateStart(
        ObservableDtoViewModelToGenerate viewModelToGenerate)
    {
        AppendLine("// <auto-generated>");
        AppendLine("#nullable enable");
        AppendLine();
        AppendLine($"namespace {viewModelToGenerate.NamespaceName};");
        AppendLine();
        AppendLine($"{viewModelToGenerate.ClassAccessModifier} partial class {viewModelToGenerate.ClassName}");
        AppendLine("{");
        IncreaseIndent();
    }

    public void GenerateConstructor(
        ObservableDtoViewModelToGenerate viewModelToGenerate)
    {
        var hasAnyRecordParameter = viewModelToGenerate.Properties.Any(p => p.IsRecordParameter);
        var readonlyModifier = !viewModelToGenerate.IsRecord || !hasAnyRecordParameter
            ? "readonly "
            : string.Empty;

        AppendLine($"private {readonlyModifier}{viewModelToGenerate.DtoTypeName} dto;");
        AppendLine();
        AppendLine($"public {viewModelToGenerate.ClassName}({viewModelToGenerate.DtoTypeName} dto)");
        AppendLine("{");
        IncreaseIndent();
        AppendLine("this.dto = dto;");
        DecreaseIndent();
        AppendLine("}");
    }

    public void GenerateProperties(
        ObservableDtoViewModelToGenerate viewModelToGenerate)
    {
        foreach (var property in viewModelToGenerate.Properties)
        {
            AppendLine();
            AppendLine($"public {property.Type} {property.Name}");
            AppendLine("{");
            IncreaseIndent();
            AppendLine($"get => dto.{property.Name};");
            AppendLine("set");
            AppendLine("{");
            IncreaseIndent();
            AppendLine($"if (dto.{property.Name} == value)");
            AppendLine("{");
            IncreaseIndent();
            AppendLine("return;");
            DecreaseIndent();
            AppendLine("}");
            AppendLine();

            // Use 'with' expression for record primary constructor parameters, direct assignment otherwise
            AppendLine(property.IsRecordParameter
                ? $"dto = dto with {{ {property.Name} = value }};"
                : $"dto.{property.Name} = value;");

            AppendLine($"RaisePropertyChanged(nameof({property.Name}));");
            DecreaseIndent();
            AppendLine("}");
            DecreaseIndent();
            AppendLine("}");
        }
    }
}