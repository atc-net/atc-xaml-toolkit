namespace Atc.XamlToolkit.SourceGenerators.Builders;

internal sealed class ObservableDtoViewModelBuilder : BuilderBase
{
    public void GenerateStart(
        ObservableDtoViewModelToGenerate viewModelToGenerate)
    {
        AppendLine("// <auto-generated>");
        AppendLine("#nullable enable");
        AppendLine();
        AppendLine($"namespace {viewModelToGenerate.NamespaceName};");
        AppendLine();
        AppendLine($"{viewModelToGenerate.ClassAccessModifier} partial class {viewModelToGenerate.ClassName}");
        AppendLine("{");
        IncreaseIndent();
    }

    public void GenerateConstructor(
        ObservableDtoViewModelToGenerate viewModelToGenerate)
    {
        var hasAnyRecordParameter = viewModelToGenerate.Properties.Any(p => p.IsRecordParameter);
        var readonlyModifier = !viewModelToGenerate.IsDtoRecord || !hasAnyRecordParameter
            ? "readonly "
            : string.Empty;

        AppendLine($"private {readonlyModifier}{viewModelToGenerate.DtoTypeName} dto;");
        AppendLine();
        AppendLine($"public {viewModelToGenerate.ClassName}({viewModelToGenerate.DtoTypeName} dto)");
        AppendLine("{");
        IncreaseIndent();
        AppendLine("this.dto = dto;");

        // Generate InitializeValidation call if any validation is enabled
        if (viewModelToGenerate.EnableValidationOnPropertyChanged || viewModelToGenerate.EnableValidationOnInit)
        {
            AppendLine();
            AppendLine("InitializeValidation(");
            IncreaseIndent();
            AppendLine($"validateOnPropertyChanged: {viewModelToGenerate.EnableValidationOnPropertyChanged.ToString().ToLowerInvariant()},");
            AppendLine($"validateAllPropertiesOnInit: {viewModelToGenerate.EnableValidationOnInit.ToString().ToLowerInvariant()});");
            DecreaseIndent();
        }

        DecreaseIndent();
        AppendLine("}");
    }

    public void GenerateInnerModelProperty(
        ObservableDtoViewModelToGenerate viewModelToGenerate)
    {
        AppendLine();
        AppendLine($"public {viewModelToGenerate.DtoTypeName} InnerModel => dto;");
    }

    public void GenerateProperties(
        ObservableDtoViewModelToGenerate viewModelToGenerate)
    {
        foreach (var property in viewModelToGenerate.Properties)
        {
            AppendLine();

            // Generate attributes if any
            foreach (var attribute in property.Attributes)
            {
                AppendLine($"[{attribute}]");
            }

            if (property.IsReadOnly)
            {
                // Generate readonly property (getter only)
                AppendLine($"public {property.Type} {property.Name} => dto.{property.Name};");
            }
            else
            {
                // Generate full property with getter and setter
                AppendLine($"public {property.Type} {property.Name}");
                AppendLine("{");
                IncreaseIndent();
                AppendLine($"get => dto.{property.Name};");
                AppendLine("set");
                AppendLine("{");
                IncreaseIndent();
                AppendLine($"if (dto.{property.Name} == value)");
                AppendLine("{");
                IncreaseIndent();
                AppendLine("return;");
                DecreaseIndent();
                AppendLine("}");
                AppendLine();

                AppendLine(property.IsRecordParameter
                    ? $"dto = dto with {{ {property.Name} = value }};"
                    : $"dto.{property.Name} = value;");

                AppendLine($"RaisePropertyChanged(nameof({property.Name}));");

                if (viewModelToGenerate.UseIsDirty)
                {
                    AppendLine("IsDirty = true;");
                }

                DecreaseIndent();
                AppendLine("}");
                DecreaseIndent();
                AppendLine("}");
            }
        }
    }

    public void GenerateMethods(
        ObservableDtoViewModelToGenerate viewModelToGenerate)
    {
        foreach (var method in viewModelToGenerate.Methods)
        {
            AppendLine();

            var parameters = string.Join(", ", method.Parameters.Select(p => $"{p.Type} {p.Name}"));
            var arguments = string.Join(", ", method.Parameters.Select(p => p.Name));

            AppendLine($"public {method.ReturnType} {method.Name}({parameters})");
            AppendLine($"    => dto.{method.Name}({arguments});");
        }
    }

    public void GenerateToString(
        ObservableDtoViewModelToGenerate viewModelToGenerate)
    {
        AppendLine();
        AppendLine("public override string ToString()");

        if (viewModelToGenerate.HasCustomToString)
        {
            AppendLine("    => dto?.ToString() ?? base.ToString();");
        }
        else
        {
            var propertyNames = viewModelToGenerate.Properties
                .Select(p => $"{{nameof({p.Name})}}: {{{p.Name}}}")
                .ToList();

            var toStringExpression = string.Join(", ", propertyNames);

            AppendLine($"    => $\"{toStringExpression}\";");
        }
    }
}