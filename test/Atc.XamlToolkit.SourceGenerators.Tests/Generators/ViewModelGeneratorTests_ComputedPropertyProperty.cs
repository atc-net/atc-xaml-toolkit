namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class ViewModelGeneratorTests
{
    [Fact]
    public void ObservableProperties_With_ComputedProperty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class PersonViewModel : ViewModelBase
            {
                [ObservableProperty]
                private string firstName = string.Empty;

                [ObservableProperty]
                private string? lastName;

                [ComputedProperty]
                public string FullName => $"{FirstName} {LastName}";
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                public string FirstName
                {
                    get => firstName;
                    set
                    {
                        if (firstName == value)
                        {
                            return;
                        }

                        firstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        RaisePropertyChanged(nameof(FullName));
                    }
                }

                public string? LastName
                {
                    get => lastName;
                    set
                    {
                        if (lastName == value)
                        {
                            return;
                        }

                        lastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        RaisePropertyChanged(nameof(FullName));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperties_With_ComputedProperty_WithMultiDeclaration()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class PersonViewModel : ViewModelBase
            {
                [ObservableProperty(DependentPropertyNames = [nameof(FullName)])]
                [NotifyPropertyChangedFor(nameof(FullName))]
                private string firstName = string.Empty;

                [ObservableProperty]
                private string? lastName;

                [ComputedProperty]
                public string FullName => $"{FirstName} {LastName}";
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                public string FirstName
                {
                    get => firstName;
                    set
                    {
                        if (firstName == value)
                        {
                            return;
                        }

                        firstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        RaisePropertyChanged(nameof(FullName));
                    }
                }

                public string? LastName
                {
                    get => lastName;
                    set
                    {
                        if (lastName == value)
                        {
                            return;
                        }

                        lastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        RaisePropertyChanged(nameof(FullName));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}