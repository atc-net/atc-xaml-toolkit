namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class FrameworkElementGeneratorTests
{
    [Fact]
    public void AttachedProperty_Field_Bool_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class DragBehavior
            {
                [AttachedProperty]
                private static bool isDraggable
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.FalseBox));

                public static bool GetIsDraggable(DependencyObject element)
                    => (bool)element.GetValue(IsDraggableProperty);

                public static void SetIsDraggable(DependencyObject element, bool value)
                    => element?.SetValue(IsDraggableProperty, BooleanBoxes.Box(value));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_Bool_Name_WithUnderscore()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class DragBehavior
            {
                [AttachedProperty]
                private static bool _isDraggable
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.FalseBox));
            
                public static bool GetIsDraggable(DependencyObject element)
                    => (bool)element.GetValue(IsDraggableProperty);
            
                public static void SetIsDraggable(DependencyObject element, bool value)
                    => element?.SetValue(IsDraggableProperty, BooleanBoxes.Box(value));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_Bool_Name_Invalid_Accessor()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class DragBehavior
            {
                [AttachedProperty]
                public static bool isDraggable
            }
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_Bool_Name_Invalid_Upper()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class DragBehavior
            {
                [AttachedProperty]
                private static bool IsDraggable
            }
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_Bool_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class DragBehavior
            {
                [AttachedProperty(DefaultValue = true)]
                private static bool isDraggable
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                public static bool GetIsDraggable(DependencyObject element)
                    => (bool)element.GetValue(IsDraggableProperty);

                public static void SetIsDraggable(DependencyObject element, bool value)
                    => element?.SetValue(IsDraggableProperty, BooleanBoxes.Box(value));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_Bool_Name_DefaultValue_Category()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class DragBehavior
            {
                [AttachedProperty(DefaultValue = true, Category = "Layout")]
                private static bool isDraggable
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Category("Layout")]
                public static bool GetIsDraggable(DependencyObject element)
                    => (bool)element.GetValue(IsDraggableProperty);

                [Category("Layout")]
                public static void SetIsDraggable(DependencyObject element, bool value)
                    => element?.SetValue(IsDraggableProperty, BooleanBoxes.Box(value));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_Bool_Name_DefaultValue_Description()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class DragBehavior
            {
                [AttachedProperty(DefaultValue = true, Description = "Long description")]
                private static bool isDraggable
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Description("Get: Long description")]
                public static bool GetIsDraggable(DependencyObject element)
                    => (bool)element.GetValue(IsDraggableProperty);

                [Description("Set: Long description")]
                public static void SetIsDraggable(DependencyObject element, bool value)
                    => element?.SetValue(IsDraggableProperty, BooleanBoxes.Box(value));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_Bool_Name_DefaultValue_Description_Category()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class DragBehavior
            {
                [AttachedProperty(DefaultValue = true, Category = "Layout", Description = "Long description")]
                private static bool isDraggable
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Category("Layout")]
                [Description("Get: Long description")]
                public static bool GetIsDraggable(DependencyObject element)
                    => (bool)element.GetValue(IsDraggableProperty);

                [Category("Layout")]
                [Description("Set: Long description")]
                public static void SetIsDraggable(DependencyObject element, bool value)
                    => element?.SetValue(IsDraggableProperty, BooleanBoxes.Box(value));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_Bool_Name_PropertyChangedCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class DragBehavior
            {
                [AttachedProperty(PropertyChangedCallback = nameof(OnIsDraggableChanged))]
                private static bool isDraggable
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class DragBehavior
            {
                public static readonly DependencyProperty IsDraggableProperty = DependencyProperty.RegisterAttached(
                    "IsDraggable",
                    typeof(bool),
                    typeof(DragBehavior),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        propertyChangedCallback: OnIsDraggableChanged));

                public static bool GetIsDraggable(DependencyObject element)
                    => (bool)element.GetValue(IsDraggableProperty);

                public static void SetIsDraggable(DependencyObject element, bool value)
                    => element?.SetValue(IsDraggableProperty, BooleanBoxes.Box(value));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_WatermarkTextBoxBehavior()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class WatermarkTextBoxBehavior
            {
                [AttachedProperty]
                private static string label;

                [AttachedProperty]
                private static Style labelStyle;

                [AttachedProperty]
                private static bool enableWatermark;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class WatermarkTextBoxBehavior
            {
                public static readonly DependencyProperty LabelProperty = DependencyProperty.RegisterAttached(
                    "Label",
                    typeof(string),
                    typeof(WatermarkTextBoxBehavior));

                public static string GetLabel(DependencyObject element)
                    => (string)element.GetValue(LabelProperty);

                public static void SetLabel(DependencyObject element, string value)
                    => element?.SetValue(LabelProperty, value);

                public static readonly DependencyProperty LabelStyleProperty = DependencyProperty.RegisterAttached(
                    "LabelStyle",
                    typeof(Style),
                    typeof(WatermarkTextBoxBehavior));

                public static Style GetLabelStyle(DependencyObject element)
                    => (Style)element.GetValue(LabelStyleProperty);

                public static void SetLabelStyle(DependencyObject element, Style value)
                    => element?.SetValue(LabelStyleProperty, value);

                public static readonly DependencyProperty EnableWatermarkProperty = DependencyProperty.RegisterAttached(
                    "EnableWatermark",
                    typeof(bool),
                    typeof(WatermarkTextBoxBehavior),
                    new PropertyMetadata(defaultValue: BooleanBoxes.FalseBox));

                public static bool GetEnableWatermark(DependencyObject element)
                    => (bool)element.GetValue(EnableWatermarkProperty);

                public static void SetEnableWatermark(DependencyObject element, bool value)
                    => element?.SetValue(EnableWatermarkProperty, BooleanBoxes.Box(value));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AttachedProperty_Field_Double_Name_DefaultValue_HelperClass()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public static partial class CheckBoxHelper
            {
                [AttachedProperty(DefaultValue = 18.0)]
                private static double checkSize
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public static partial class CheckBoxHelper
            {
                public static readonly DependencyProperty CheckSizeProperty = DependencyProperty.RegisterAttached(
                    "CheckSize",
                    typeof(double),
                    typeof(CheckBoxHelper),
                    new PropertyMetadata(defaultValue: 18.0d));

                public static double GetCheckSize(DependencyObject element)
                    => (double)element.GetValue(CheckSizeProperty);

                public static void SetCheckSize(DependencyObject element, double value)
                    => element?.SetValue(CheckSizeProperty, value);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}