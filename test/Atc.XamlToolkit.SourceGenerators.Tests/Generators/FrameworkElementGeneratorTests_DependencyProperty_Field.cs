namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class FrameworkElementGeneratorTests
{
    [Fact]
    public void DependencyProperty_Field_Bool_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.FalseBox));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_WithUnderscore()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private bool _isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.FalseBox));
            
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_Invalid_Accessor()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                public bool isRunning;
            }
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_Invalid_Upper()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private bool IsRunning;
            }
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = true)]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultValue_Category()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = true, Category = "Layout")]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Category("Layout")]
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultValue_Description()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = true, Description = "Long description")]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Description("Long description")]
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultValue_Category_Description()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = true, Category = "Layout", Description = "Long description")]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Category("Layout")]
                [Description("Long description")]
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_PropertyChangedCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(PropertyChangedCallback = nameof(PropertyChangedCallback))]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        propertyChangedCallback: PropertyChangedCallback));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_CoerceValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(CoerceValueCallback = nameof(CoerceValueCallback))]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        coerceValueCallback: CoerceValueCallback));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_PropertyChangedCallback_CoerceValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback))]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender)]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags_DefaultUpdateSourceTrigger()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender, DefaultUpdateSourceTrigger = UpdateSourceTrigger.Default)]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using System.Windows.Data;

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender,
                        isAnimationProhibited: false,
                        defaultUpdateSourceTrigger: UpdateSourceTrigger.Default));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags_DefaultUpdateSourceTrigger_IsAnimationProhibited()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender, DefaultUpdateSourceTrigger = UpdateSourceTrigger.Default, IsAnimationProhibited = true)]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using System.Windows.Data;

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender,
                        defaultUpdateSourceTrigger: UpdateSourceTrigger.Default,
                        isAnimationProhibited: true));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags_DefaultUpdateSourceTrigger_IsAnimationProhibited_ValidateValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender, DefaultUpdateSourceTrigger = UpdateSourceTrigger.Default, IsAnimationProhibited = true, ValidateValueCallback = nameof(ValidateValueCallback))]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using System.Windows.Data;

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender,
                        defaultUpdateSourceTrigger: UpdateSourceTrigger.Default,
                        isAnimationProhibited: true),
                    validateValueCallback: ValidateValueCallback);

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Byte_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 11)]
                private byte myByte;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty MyByteProperty = DependencyProperty.Register(
                    nameof(MyByte),
                    typeof(byte),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: (byte)11));

                public byte MyByte
                {
                    get => (byte)GetValue(MyByteProperty);
                    set => SetValue(MyByteProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_SByte_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 11)]
                private sbyte myByte;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty MyByteProperty = DependencyProperty.Register(
                    nameof(MyByte),
                    typeof(sbyte),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: (sbyte)11));

                public sbyte MyByte
                {
                    get => (sbyte)GetValue(MyByteProperty);
                    set => SetValue(MyByteProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Short_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 11)]
                private short myShort;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty MyShortProperty = DependencyProperty.Register(
                    nameof(MyShort),
                    typeof(short),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: (short)11));

                public short MyShort
                {
                    get => (short)GetValue(MyShortProperty);
                    set => SetValue(MyShortProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_UShort_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 11)]
                private ushort myUshort;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty MyUshortProperty = DependencyProperty.Register(
                    nameof(MyUshort),
                    typeof(ushort),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: (ushort)11));

                public ushort MyUshort
                {
                    get => (ushort)GetValue(MyUshortProperty);
                    set => SetValue(MyUshortProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Int_Name_DefaultValue_PropertyChangedCallback_ValidateValueCallback()
    {
        const string inputCode =
                """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 27, PropertyChangedCallback = nameof(PropertyChangedCallback), ValidateValueCallback = nameof(ValidateValueCallback))]
                private int delay;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DelayProperty = DependencyProperty.Register(
                    nameof(Delay),
                    typeof(int),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: 27,
                        propertyChangedCallback: PropertyChangedCallback),
                    validateValueCallback: ValidateValueCallback);

                public int Delay
                {
                    get => (int)GetValue(DelayProperty);
                    set => SetValue(DelayProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultValue_Flags()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = true, Flags = FrameworkPropertyMetadataOptions.AffectsMeasure)]
                private bool isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_Flags()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(Flags = FrameworkPropertyMetadataOptions.AffectsMeasure)]
                private bool? isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool?),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: null,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure));

                public bool? IsRunning
                {
                    get => (bool?)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Bool_Name_DefaultNullValue_Flags()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = null, Flags = FrameworkPropertyMetadataOptions.AffectsMeasure)]
                private bool? isRunning;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool?),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: null,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure));

                public bool? IsRunning
                {
                    get => (bool?)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, BooleanBoxes.Box(value));
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Decimal_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private decimal decimalValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DecimalValueProperty = DependencyProperty.Register(
                    nameof(DecimalValue),
                    typeof(decimal),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0m));

                public decimal DecimalValue
                {
                    get => (decimal)GetValue(DecimalValueProperty);
                    set => SetValue(DecimalValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Decimal_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 1.1)]
                private decimal decimalValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DecimalValueProperty = DependencyProperty.Register(
                    nameof(DecimalValue),
                    typeof(decimal),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1.1m));

                public decimal DecimalValue
                {
                    get => (decimal)GetValue(DecimalValueProperty);
                    set => SetValue(DecimalValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Double_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private double doubleValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DoubleValueProperty = DependencyProperty.Register(
                    nameof(DoubleValue),
                    typeof(double),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0d));

                public double DoubleValue
                {
                    get => (double)GetValue(DoubleValueProperty);
                    set => SetValue(DoubleValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Double_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 1.1)]
                private double doubleValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DoubleValueProperty = DependencyProperty.Register(
                    nameof(DoubleValue),
                    typeof(double),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1.1d));

                public double DoubleValue
                {
                    get => (double)GetValue(DoubleValueProperty);
                    set => SetValue(DoubleValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Double_Name_DefaultValue_NaN()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = double.NaN)]
                private double doubleValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DoubleValueProperty = DependencyProperty.Register(
                    nameof(DoubleValue),
                    typeof(double),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: double.NaN));

                public double DoubleValue
                {
                    get => (double)GetValue(DoubleValueProperty);
                    set => SetValue(DoubleValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Double_Name_DefaultValue_Min()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = double.MinValue)]
                private double doubleValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DoubleValueProperty = DependencyProperty.Register(
                    nameof(DoubleValue),
                    typeof(double),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: double.MinValue));

                public double DoubleValue
                {
                    get => (double)GetValue(DoubleValueProperty);
                    set => SetValue(DoubleValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Double_Name_DefaultValue_Max()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = double.MaxValue)]
                private double doubleValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DoubleValueProperty = DependencyProperty.Register(
                    nameof(DoubleValue),
                    typeof(double),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: double.MaxValue));

                public double DoubleValue
                {
                    get => (double)GetValue(DoubleValueProperty);
                    set => SetValue(DoubleValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Float_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private float floatValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty FloatValueProperty = DependencyProperty.Register(
                    nameof(FloatValue),
                    typeof(float),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0f));

                public float FloatValue
                {
                    get => (float)GetValue(FloatValueProperty);
                    set => SetValue(FloatValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Float_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 1.1)]
                private float floatValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty FloatValueProperty = DependencyProperty.Register(
                    nameof(FloatValue),
                    typeof(float),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1.1f));

                public float FloatValue
                {
                    get => (float)GetValue(FloatValueProperty);
                    set => SetValue(FloatValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Int_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private int intValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IntValueProperty = DependencyProperty.Register(
                    nameof(IntValue),
                    typeof(int),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0));

                public int IntValue
                {
                    get => (int)GetValue(IntValueProperty);
                    set => SetValue(IntValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_UInt_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private uint uintValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty UintValueProperty = DependencyProperty.Register(
                    nameof(UintValue),
                    typeof(uint),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0U));

                public uint UintValue
                {
                    get => (uint)GetValue(UintValueProperty);
                    set => SetValue(UintValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Int_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 1)]
                private int intValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IntValueProperty = DependencyProperty.Register(
                    nameof(IntValue),
                    typeof(int),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1));

                public int IntValue
                {
                    get => (int)GetValue(IntValueProperty);
                    set => SetValue(IntValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_UInt_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 1)]
                private uint uintValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty UintValueProperty = DependencyProperty.Register(
                    nameof(UintValue),
                    typeof(uint),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1U));

                public uint UintValue
                {
                    get => (uint)GetValue(UintValueProperty);
                    set => SetValue(UintValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Int32_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 1)]
                private Int32 int32Value;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty Int32ValueProperty = DependencyProperty.Register(
                    nameof(Int32Value),
                    typeof(int),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1));

                public int Int32Value
                {
                    get => (int)GetValue(Int32ValueProperty);
                    set => SetValue(Int32ValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Long_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 1)]
                private long longValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty LongValueProperty = DependencyProperty.Register(
                    nameof(LongValue),
                    typeof(long),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1));

                public long LongValue
                {
                    get => (long)GetValue(LongValueProperty);
                    set => SetValue(LongValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_ULong_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = 1)]
                private ulong ulongValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty UlongValueProperty = DependencyProperty.Register(
                    nameof(UlongValue),
                    typeof(ulong),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1UL));

                public ulong UlongValue
                {
                    get => (ulong)GetValue(UlongValueProperty);
                    set => SetValue(UlongValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_LogItem_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private LogItem logItem;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty LogItemProperty = DependencyProperty.Register(
                    nameof(LogItem),
                    typeof(LogItem),
                    typeof(MyControl));

                public LogItem LogItem
                {
                    get => (LogItem)GetValue(LogItemProperty);
                    set => SetValue(LogItemProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_LogItem_Name_ValidateValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(ValidateValueCallback = nameof(ValidateValueCallback))]
                private LogItem logItem;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty LogItemProperty = DependencyProperty.Register(
                    nameof(LogItem),
                    typeof(LogItem),
                    typeof(MyControl),
                validateValueCallback: ValidateValueCallback);

                public LogItem LogItem
                {
                    get => (LogItem)GetValue(LogItemProperty);
                    set => SetValue(LogItemProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Int_Name_ValidateValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(ValidateValueCallback = nameof(ValidateValueCallback))]
                private int intValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IntValueProperty = DependencyProperty.Register(
                    nameof(IntValue),
                    typeof(int),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0),
                validateValueCallback: ValidateValueCallback);

                public int IntValue
                {
                    get => (int)GetValue(IntValueProperty);
                    set => SetValue(IntValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_String_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = "Hello world")]
                private string stringValue;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty StringValueProperty = DependencyProperty.Register(
                    nameof(StringValue),
                    typeof(string),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: "Hello world"));
            
                public string StringValue
                {
                    get => (string)GetValue(StringValueProperty);
                    set => SetValue(StringValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_ListOfString_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = "error;err:")]
                private IList<string> errorTerms;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ErrorTermsProperty = DependencyProperty.Register(
                    nameof(ErrorTerms),
                    typeof(IList<string>),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: new List<string> { "error", "err:" }));
            
                public IList<string> ErrorTerms
                {
                    get => (IList<string>)GetValue(ErrorTermsProperty);
                    set => SetValue(ErrorTermsProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_ListOfStringNullable_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = "error;err:")]
                private IList<string>? errorTerms;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ErrorTermsProperty = DependencyProperty.Register(
                    nameof(ErrorTerms),
                    typeof(IList<string>),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: new List<string> { "error", "err:" }));
            
                public IList<string>? ErrorTerms
                {
                    get => (IList<string>?)GetValue(ErrorTermsProperty);
                    set => SetValue(ErrorTermsProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_LogCategoryType_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = LogCategoryType.Debug)]
                private LogCategoryType logCategory;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty LogCategoryProperty = DependencyProperty.Register(
                    nameof(LogCategory),
                    typeof(LogCategoryType),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: LogCategoryType.Debug));
            
                public LogCategoryType LogCategory
                {
                    get => (LogCategoryType)GetValue(LogCategoryProperty);
                    set => SetValue(LogCategoryProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Color_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = "Red")]
                private Color errorTextColor;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ErrorTextColorProperty = DependencyProperty.Register(
                    nameof(ErrorTextColor),
                    typeof(Color),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: Colors.Red));
            
                public Color ErrorTextColor
                {
                    get => (Color)GetValue(ErrorTextColorProperty);
                    set => SetValue(ErrorTextColorProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Brush_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = "Red")]
                private Brush errorTextBrush;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ErrorTextBrushProperty = DependencyProperty.Register(
                    nameof(ErrorTextBrush),
                    typeof(Brush),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: Brushes.Red));
            
                public Brush ErrorTextBrush
                {
                    get => (Brush)GetValue(ErrorTextBrushProperty);
                    set => SetValue(ErrorTextBrushProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_FontFamily_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty(DefaultValue = "Consolas")]
                private FontFamily myFontFamily;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty MyFontFamilyProperty = DependencyProperty.Register(
                    nameof(MyFontFamily),
                    typeof(FontFamily),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: new FontFamily("Consolas")));
            
                public FontFamily MyFontFamily
                {
                    get => (FontFamily)GetValue(MyFontFamilyProperty);
                    set => SetValue(MyFontFamilyProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Dictionary_String_String_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private Dictionary<string, string> items;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ItemsProperty = DependencyProperty.Register(
                    nameof(Items),
                    typeof(Dictionary<string, string>),
                    typeof(MyControl));

                public Dictionary<string, string> Items
                {
                    get => (Dictionary<string, string>)GetValue(ItemsProperty);
                    set => SetValue(ItemsProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Field_Dictionary_String_Brush_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class MyControl : UserControl
            {
                [DependencyProperty]
                private Dictionary<string, Brush> items;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ItemsProperty = DependencyProperty.Register(
                    nameof(Items),
                    typeof(Dictionary<string, Brush>),
                    typeof(MyControl));

                public Dictionary<string, Brush> Items
                {
                    get => (Dictionary<string, Brush>)GetValue(ItemsProperty);
                    set => SetValue(ItemsProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}