namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class FrameworkElementGeneratorTests
{
    [Fact]
    public void DependencyProperty_Class_Bool_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.FalseBox));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultValue_Category()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, Category = "Layout")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Category("Layout")]
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultValue_Description()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, Description = "Long description")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Description("Long description")]
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultValue_Category_Description()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, Category = "Layout", Description = "Long description")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: BooleanBoxes.TrueBox));

                [Category("Layout")]
                [Description("Long description")]
                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_PropertyChangedCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", PropertyChangedCallback = nameof(PropertyChangedCallback))]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        propertyChangedCallback: PropertyChangedCallback));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_CoerceValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", CoerceValueCallback = nameof(CoerceValueCallback))]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        coerceValueCallback: CoerceValueCallback));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_PropertyChangedCallback_CoerceValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback))]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new PropertyMetadata(
                        defaultValue: BooleanBoxes.FalseBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags_DefaultUpdateSourceTrigger()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender, DefaultUpdateSourceTrigger = UpdateSourceTrigger.Default)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using System.Windows.Data;

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender,
                        isAnimationProhibited: false,
                        defaultUpdateSourceTrigger: UpdateSourceTrigger.Default));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags_DefaultUpdateSourceTrigger_IsAnimationProhibited()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender, DefaultUpdateSourceTrigger = UpdateSourceTrigger.Default, IsAnimationProhibited = true)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using System.Windows.Data;

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender,
                        defaultUpdateSourceTrigger: UpdateSourceTrigger.Default,
                        isAnimationProhibited: true));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultValue_PropertyChangedCallback_CoerceValueCallback_Flags_DefaultUpdateSourceTrigger_IsAnimationProhibited_ValidateValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, PropertyChangedCallback = nameof(PropertyChangedCallback), CoerceValueCallback = nameof(CoerceValueCallback), Flags = FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender, DefaultUpdateSourceTrigger = UpdateSourceTrigger.Default, IsAnimationProhibited = true, ValidateValueCallback = nameof(ValidateValueCallback))]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using System.Windows.Data;

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        propertyChangedCallback: PropertyChangedCallback,
                        coerceValueCallback: CoerceValueCallback,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure | FrameworkPropertyMetadataOptions.AffectsRender,
                        defaultUpdateSourceTrigger: UpdateSourceTrigger.Default,
                        isAnimationProhibited: true),
                    validateValueCallback: ValidateValueCallback);

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultValue_Flags()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool>("IsRunning", DefaultValue = true, Flags = FrameworkPropertyMetadataOptions.AffectsMeasure)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: BooleanBoxes.TrueBox,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure));

                public bool IsRunning
                {
                    get => (bool)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_Flags()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool?>("IsRunning", Flags = FrameworkPropertyMetadataOptions.AffectsMeasure)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool?),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: null,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure));

                public bool? IsRunning
                {
                    get => (bool?)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Bool_Name_DefaultNullValue_Flags()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<bool?>("IsRunning", DefaultValue = null, Flags = FrameworkPropertyMetadataOptions.AffectsMeasure)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IsRunningProperty = DependencyProperty.Register(
                    nameof(IsRunning),
                    typeof(bool?),
                    typeof(MyControl),
                    new FrameworkPropertyMetadata(
                        defaultValue: null,
                        flags: FrameworkPropertyMetadataOptions.AffectsMeasure));

                public bool? IsRunning
                {
                    get => (bool?)GetValue(IsRunningProperty);
                    set => SetValue(IsRunningProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Decimal_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<decimal>("DecimalValue")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DecimalValueProperty = DependencyProperty.Register(
                    nameof(DecimalValue),
                    typeof(decimal),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0m));

                public decimal DecimalValue
                {
                    get => (decimal)GetValue(DecimalValueProperty);
                    set => SetValue(DecimalValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Decimal_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<decimal>("DecimalValue", DefaultValue = 1.1)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DecimalValueProperty = DependencyProperty.Register(
                    nameof(DecimalValue),
                    typeof(decimal),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1.1m));

                public decimal DecimalValue
                {
                    get => (decimal)GetValue(DecimalValueProperty);
                    set => SetValue(DecimalValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Double_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<double>("DoubleValue")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DoubleValueProperty = DependencyProperty.Register(
                    nameof(DoubleValue),
                    typeof(double),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0d));

                public double DoubleValue
                {
                    get => (double)GetValue(DoubleValueProperty);
                    set => SetValue(DoubleValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Double_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<double>("DoubleValue", DefaultValue = 1.1)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DoubleValueProperty = DependencyProperty.Register(
                    nameof(DoubleValue),
                    typeof(double),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1.1d));

                public double DoubleValue
                {
                    get => (double)GetValue(DoubleValueProperty);
                    set => SetValue(DoubleValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Double_Name_DefaultValue_NaN()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<double>("DoubleValue", DefaultValue = double.NaN)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty DoubleValueProperty = DependencyProperty.Register(
                    nameof(DoubleValue),
                    typeof(double),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: double.NaN));

                public double DoubleValue
                {
                    get => (double)GetValue(DoubleValueProperty);
                    set => SetValue(DoubleValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Float_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<float>("FloatValue")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty FloatValueProperty = DependencyProperty.Register(
                    nameof(FloatValue),
                    typeof(float),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0f));

                public float FloatValue
                {
                    get => (float)GetValue(FloatValueProperty);
                    set => SetValue(FloatValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Float_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<float>("FloatValue", DefaultValue = 1.1)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty FloatValueProperty = DependencyProperty.Register(
                    nameof(FloatValue),
                    typeof(float),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1.1f));

                public float FloatValue
                {
                    get => (float)GetValue(FloatValueProperty);
                    set => SetValue(FloatValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Int_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<int>("IntValue")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IntValueProperty = DependencyProperty.Register(
                    nameof(IntValue),
                    typeof(int),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0));

                public int IntValue
                {
                    get => (int)GetValue(IntValueProperty);
                    set => SetValue(IntValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Int_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<int>("IntValue", DefaultValue = 1)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IntValueProperty = DependencyProperty.Register(
                    nameof(IntValue),
                    typeof(int),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1));

                public int IntValue
                {
                    get => (int)GetValue(IntValueProperty);
                    set => SetValue(IntValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Int32_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<Int32>("Int32Value", DefaultValue = 1)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty Int32ValueProperty = DependencyProperty.Register(
                    nameof(Int32Value),
                    typeof(int),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 1));

                public int Int32Value
                {
                    get => (int)GetValue(Int32ValueProperty);
                    set => SetValue(Int32ValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_LogItem_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<LogItem>("LogItem")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty LogItemProperty = DependencyProperty.Register(
                    nameof(LogItem),
                    typeof(LogItem),
                    typeof(MyControl));

                public LogItem LogItem
                {
                    get => (LogItem)GetValue(LogItemProperty);
                    set => SetValue(LogItemProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_LogItem_Name_ValidateValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<LogItem>("LogItem", ValidateValueCallback = nameof(ValidateValueCallback))]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty LogItemProperty = DependencyProperty.Register(
                    nameof(LogItem),
                    typeof(LogItem),
                    typeof(MyControl),
                validateValueCallback: ValidateValueCallback);

                public LogItem LogItem
                {
                    get => (LogItem)GetValue(LogItemProperty);
                    set => SetValue(LogItemProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Int_Name_ValidateValueCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<int>("IntValue", ValidateValueCallback = nameof(ValidateValueCallback))]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty IntValueProperty = DependencyProperty.Register(
                    nameof(IntValue),
                    typeof(int),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: 0),
                validateValueCallback: ValidateValueCallback);

                public int IntValue
                {
                    get => (int)GetValue(IntValueProperty);
                    set => SetValue(IntValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_String_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<string>("StringValue", DefaultValue = "Hello world")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty StringValueProperty = DependencyProperty.Register(
                    nameof(StringValue),
                    typeof(string),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: "Hello world"));
            
                public string StringValue
                {
                    get => (string)GetValue(StringValueProperty);
                    set => SetValue(StringValueProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_ListOfString_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<IList<string>>("ErrorTerms", DefaultValue = "error;err:")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ErrorTermsProperty = DependencyProperty.Register(
                    nameof(ErrorTerms),
                    typeof(IList<string>),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: new List<string> { "error", "err:" }));
            
                public IList<string> ErrorTerms
                {
                    get => (IList<string>)GetValue(ErrorTermsProperty);
                    set => SetValue(ErrorTermsProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_ListOfStringNullable_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<IList<string>?>("ErrorTerms", DefaultValue = "error;err:")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ErrorTermsProperty = DependencyProperty.Register(
                    nameof(ErrorTerms),
                    typeof(IList<string>),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: new List<string> { "error", "err:" }));
            
                public IList<string>? ErrorTerms
                {
                    get => (IList<string>?)GetValue(ErrorTermsProperty);
                    set => SetValue(ErrorTermsProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_LogCategoryType_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<LogCategoryType>("LogCategory", DefaultValue = LogCategoryType.Debug)]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty LogCategoryProperty = DependencyProperty.Register(
                    nameof(LogCategory),
                    typeof(LogCategoryType),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: LogCategoryType.Debug));
            
                public LogCategoryType LogCategory
                {
                    get => (LogCategoryType)GetValue(LogCategoryProperty);
                    set => SetValue(LogCategoryProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Color_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<Color>("ErrorTextColor", DefaultValue = "Red")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ErrorTextColorProperty = DependencyProperty.Register(
                    nameof(ErrorTextColor),
                    typeof(Color),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: Colors.Red));
            
                public Color ErrorTextColor
                {
                    get => (Color)GetValue(ErrorTextColorProperty);
                    set => SetValue(ErrorTextColorProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_Brush_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<Brush>("ErrorTextBrush", DefaultValue = "Red")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty ErrorTextBrushProperty = DependencyProperty.Register(
                    nameof(ErrorTextBrush),
                    typeof(Brush),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: Brushes.Red));
            
                public Brush ErrorTextBrush
                {
                    get => (Brush)GetValue(ErrorTextBrushProperty);
                    set => SetValue(ErrorTextBrushProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void DependencyProperty_Class_FontFamily_Name_DefaultValue()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            [DependencyProperty<FontFamily>("MyFontFamily", DefaultValue = "Consolas")]
            public partial class MyControl : UserControl
            {
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MyControl
            {
                public static readonly DependencyProperty MyFontFamilyProperty = DependencyProperty.Register(
                    nameof(MyFontFamily),
                    typeof(FontFamily),
                    typeof(MyControl),
                    new PropertyMetadata(defaultValue: new FontFamily("Consolas")));
            
                public FontFamily MyFontFamily
                {
                    get => (FontFamily)GetValue(MyFontFamilyProperty);
                    set => SetValue(MyFontFamilyProperty, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}