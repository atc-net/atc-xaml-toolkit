namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class ViewModelGeneratorTests
{
    [Fact]
    public void RelayCommand_NoParameter()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(Save);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void Save(CancellationToken cancellationToken)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(() => Save(CancellationToken.None));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CustomName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MySave")]
                public void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? mySaveCommand;

                public IRelayCommand MySaveCommand => mySaveCommand ??= new RelayCommand(Save);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_MethodHandlerName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void SaveHandler()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(SaveHandler);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_MethodCommandName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void SaveCommand()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommandX;

                public IRelayCommand SaveCommandX => saveCommandX ??= new RelayCommand(SaveCommand);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_MethodCommandHandlerName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void SaveCommandHandler()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(SaveCommandHandler);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void Save(string val)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;

                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(Save);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterInt()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void Save(int val)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<int>? saveCommand;

                public IRelayCommand<int> SaveCommand => saveCommand ??= new RelayCommand<int>(Save);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterTuple()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand]
                public void Save((LeftTopRightBottomType DirectionType, int StepMoves) data)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<(LeftTopRightBottomType DirectionType, int StepMoves)>? saveCommand;
            
                public IRelayCommand<(LeftTopRightBottomType DirectionType, int StepMoves)> SaveCommand => saveCommand ??= new RelayCommand<(LeftTopRightBottomType DirectionType, int StepMoves)>(Save);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save()
                {
                }

                public bool CanSave()
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    Save,
                    CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CanExecute_Inverted()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave), InvertCanExecute = true)]
                public void Save()
                {
                }

                public bool CanSave()
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    Save,
                    !CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CanExecute_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save(CancellationToken cancellationToken)
                {
                }

                public bool CanSave()
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    () => Save(CancellationToken.None),
                    CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save(string val)
                {
                }

                public bool CanSave()
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;

                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    Save,
                    CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterInt_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save(int val)
                {
                }

                public bool CanSave()
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<int>? saveCommand;

                public IRelayCommand<int> SaveCommand => saveCommand ??= new RelayCommand<int>(
                    Save,
                    CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValue_Single()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ParameterValue = LeftTopRightBottomType.Left)]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? turnDirectionSingleCommand;

                public IRelayCommand TurnDirectionSingleCommand => turnDirectionSingleCommand ??= new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Left));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValue_Multi()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MyTestLeft", ParameterValue = LeftTopRightBottomType.Left)]
                [RelayCommand("MyTestTop", ParameterValue = LeftTopRightBottomType.Top)]
                [RelayCommand("MyTestRight", ParameterValue = LeftTopRightBottomType.Right)]
                [RelayCommand("MyTestBottom", ParameterValue = LeftTopRightBottomType.Bottom)]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? myTestLeftCommand;
                private IRelayCommand? myTestTopCommand;
                private IRelayCommand? myTestRightCommand;
                private IRelayCommand? myTestBottomCommand;

                public IRelayCommand MyTestLeftCommand => myTestLeftCommand ??= new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Left));

                public IRelayCommand MyTestTopCommand => myTestTopCommand ??= new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Top));

                public IRelayCommand MyTestRightCommand => myTestRightCommand ??= new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Right));

                public IRelayCommand MyTestBottomCommand => myTestBottomCommand ??= new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Bottom));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValues_Multi()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MyTestLeft", ParameterValues = [LeftTopRightBottomType.Left, 1])]
                [RelayCommand("MyTestTop", ParameterValues = [LeftTopRightBottomType.Top, 1])]
                [RelayCommand("MyTestRight", ParameterValues = [LeftTopRightBottomType.Right, 1])]
                [RelayCommand("MyTestBottom", ParameterValues = [LeftTopRightBottomType.Bottom, 1])]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType, int steps)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? myTestLeftCommand;
                private IRelayCommand? myTestTopCommand;
                private IRelayCommand? myTestRightCommand;
                private IRelayCommand? myTestBottomCommand;

                public IRelayCommand MyTestLeftCommand => myTestLeftCommand ??= new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Left, 1));

                public IRelayCommand MyTestTopCommand => myTestTopCommand ??= new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Top, 1));

                public IRelayCommand MyTestRightCommand => myTestRightCommand ??= new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Right, 1));

                public IRelayCommand MyTestBottomCommand => myTestBottomCommand ??= new RelayCommand(() => TurnDirectionSingle(LeftTopRightBottomType.Bottom, 1));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValues_Multi_Invalid_DuplicateName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ParameterValues = [LeftTopRightBottomType.Left, 1])]
                [RelayCommand(ParameterValues = [LeftTopRightBottomType.Top, 1])]
                [RelayCommand(ParameterValues = [LeftTopRightBottomType.Right, 1])]
                [RelayCommand(ParameterValues = [LeftTopRightBottomType.Bottom, 1])]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType, int steps)
                {
                }
            }
            """;

        var expectedErrorCodes = new[] { "AtcXamlToolkit0001" };

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultHasDiagnostics(expectedErrorCodes, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterValues_Multi_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MyTestLeft", CanExecute = nameof(CanTurnDirectionSingle), ParameterValues = [LeftTopRightBottomType.Left, 1])]
                [RelayCommand("MyTestTop", CanExecute = nameof(CanTurnDirectionSingle), ParameterValues = [LeftTopRightBottomType.Top, 1])]
                [RelayCommand("MyTestRight", CanExecute = nameof(CanTurnDirectionSingle), ParameterValues = [LeftTopRightBottomType.Right, 1])]
                [RelayCommand("MyTestBottom", CanExecute = nameof(CanTurnDirectionSingle), ParameterValues = [LeftTopRightBottomType.Bottom, 1])]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType, int steps)
                {
                }

                public bool CanTurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType, int steps)
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? myTestLeftCommand;
                private IRelayCommand? myTestTopCommand;
                private IRelayCommand? myTestRightCommand;
                private IRelayCommand? myTestBottomCommand;

                public IRelayCommand MyTestLeftCommand => myTestLeftCommand ??= new RelayCommand(
                    () => TurnDirectionSingle(LeftTopRightBottomType.Left, 1),
                    CanTurnDirectionSingle(LeftTopRightBottomType.Left, 1));

                public IRelayCommand MyTestTopCommand => myTestTopCommand ??= new RelayCommand(
                    () => TurnDirectionSingle(LeftTopRightBottomType.Top, 1),
                    CanTurnDirectionSingle(LeftTopRightBottomType.Top, 1));

                public IRelayCommand MyTestRightCommand => myTestRightCommand ??= new RelayCommand(
                    () => TurnDirectionSingle(LeftTopRightBottomType.Right, 1),
                    CanTurnDirectionSingle(LeftTopRightBottomType.Right, 1));

                public IRelayCommand MyTestBottomCommand => myTestBottomCommand ??= new RelayCommand(
                    () => TurnDirectionSingle(LeftTopRightBottomType.Bottom, 1),
                    CanTurnDirectionSingle(LeftTopRightBottomType.Bottom, 1));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CanExecuteOnProperty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save()
                {
                }

                public bool CanSave => return true;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    Save,
                    () => CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_NoParameter_CanExecuteOnProperty_Inverted()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave), InvertCanExecute = true)]
                public void Save()
                {
                }

                public bool CanSave => return true;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    Save,
                    () => !CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString_CanExecuteOnProperty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save(string val)
                {
                }

                public bool CanSave => return true;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;

                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    Save,
                    _ => CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString_CanExecuteOnProperty_Inverted()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave), InvertCanExecute = true)]
                public void Save(string val)
                {
                }

                public bool CanSave => return true;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;

                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    Save,
                    _ => !CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString_CanExecuteOnObservableProperty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave))]
                public void Save(string val)
                {
                }

                [ObservableProperty] private bool canSave;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;

                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    Save,
                    _ => CanSave);

                public bool CanSave
                {
                    get => canSave;
                    set
                    {
                        if (canSave == value)
                        {
                            return;
                        }

                        canSave = value;
                        RaisePropertyChanged(nameof(CanSave));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ParameterString_CanExecuteOnNamedObservableProperty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = "MyCanSave")]
                public void Save(string val)
                {
                }

                [ObservableProperty("MyCanSave")] private bool canSave;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;

                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    Save,
                    _ => MyCanSave);

                public bool MyCanSave
                {
                    get => canSave;
                    set
                    {
                        if (canSave == value)
                        {
                            return;
                        }

                        canSave = value;
                        RaisePropertyChanged(nameof(MyCanSave));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ExecuteOnBackgroundThread_NoParameter()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ExecuteOnBackgroundThread = true)]
                public void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;
            
                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    () => Task.Run(Save));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ExecuteOnBackgroundThread_NoParameter_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave), ExecuteOnBackgroundThread = true)]
                public void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;
            
                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    () => Task.Run(Save),
                    CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ExecuteOnBackgroundThread_NoParameter_CanExecute_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave), ExecuteOnBackgroundThread = true)]
                public void Save(CancellationToken cancellationToken)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    () => Task.Run(() => Save(CancellationToken.None)),
                    CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ExecuteOnBackgroundThread_ParameterString()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ExecuteOnBackgroundThread = true)]
                public void Save(string val)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;
            
                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    x => Task.Run(() => Save(x)));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_ExecuteOnBackgroundThread_ParameterString_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave), ExecuteOnBackgroundThread = true)]
                public void Save(string val)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;
            
                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    x => Task.Run(() => Save(x)),
                    CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_NoParameter()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(AutoSetIsBusy = true)]
                public void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            Save();
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_NoParameter_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(AutoSetIsBusy = true)]
                public void Save(CancellationToken cancellationToken)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            Save(CancellationToken.None);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ParameterString()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(AutoSetIsBusy = true)]
                public void Save(string val)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;

                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    x =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            Save(x);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ParameterInt()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(AutoSetIsBusy = true)]
                public void Save(int val)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<int>? saveCommand;

                public IRelayCommand<int> SaveCommand => saveCommand ??= new RelayCommand<int>(
                    x =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            Save(x);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ParameterInt_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(AutoSetIsBusy = true)]
                public void Save(int val, CancellationToken cancellationToken)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<int>? saveCommand;

                public IRelayCommand<int> SaveCommand => saveCommand ??= new RelayCommand<int>(
                    x =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            Save(x, CancellationToken.None);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ParameterValue_Multi()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MyTestLeft", ParameterValue = LeftTopRightBottomType.Left, AutoSetIsBusy = true)]
                [RelayCommand("MyTestTop", ParameterValue = LeftTopRightBottomType.Top, AutoSetIsBusy = true)]
                [RelayCommand("MyTestRight", ParameterValue = LeftTopRightBottomType.Right, AutoSetIsBusy = true)]
                [RelayCommand("MyTestBottom", ParameterValue = LeftTopRightBottomType.Bottom, AutoSetIsBusy = true)]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? myTestLeftCommand;
                private IRelayCommand? myTestTopCommand;
                private IRelayCommand? myTestRightCommand;
                private IRelayCommand? myTestBottomCommand;

                public IRelayCommand MyTestLeftCommand => myTestLeftCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            TurnDirectionSingle(LeftTopRightBottomType.Left);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });

                public IRelayCommand MyTestTopCommand => myTestTopCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            TurnDirectionSingle(LeftTopRightBottomType.Top);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });

                public IRelayCommand MyTestRightCommand => myTestRightCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            TurnDirectionSingle(LeftTopRightBottomType.Right);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });

                public IRelayCommand MyTestBottomCommand => myTestBottomCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            TurnDirectionSingle(LeftTopRightBottomType.Bottom);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ExecuteOnBackgroundThread_NoParameter()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                public void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;
            
                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(Save)
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ExecuteOnBackgroundThread_NoParameter_CanExecute()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave), ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                public void Save()
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? saveCommand;
            
                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(Save)
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    },
                    CanSave);
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ExecuteOnBackgroundThread_ParameterString()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                public void Save(string val)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;
            
                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    x =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => Save(x))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ExecuteOnBackgroundThread_ParameterString_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                public void Save(string val, CancellationToken cancellationToken)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<string>? saveCommand;
            
                public IRelayCommand<string> SaveCommand => saveCommand ??= new RelayCommand<string>(
                    x =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => Save(x, CancellationToken.None))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ExecuteOnBackgroundThread_ParameterValue_Multi()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MyTestLeft", ParameterValue = LeftTopRightBottomType.Left, ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                [RelayCommand("MyTestTop", ParameterValue = LeftTopRightBottomType.Top, ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                [RelayCommand("MyTestRight", ParameterValue = LeftTopRightBottomType.Right, ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                [RelayCommand("MyTestBottom", ParameterValue = LeftTopRightBottomType.Bottom, ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? myTestLeftCommand;
                private IRelayCommand? myTestTopCommand;
                private IRelayCommand? myTestRightCommand;
                private IRelayCommand? myTestBottomCommand;

                public IRelayCommand MyTestLeftCommand => myTestLeftCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => TurnDirectionSingle(LeftTopRightBottomType.Left))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });

                public IRelayCommand MyTestTopCommand => myTestTopCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => TurnDirectionSingle(LeftTopRightBottomType.Top))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });

                public IRelayCommand MyTestRightCommand => myTestRightCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => TurnDirectionSingle(LeftTopRightBottomType.Right))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });

                public IRelayCommand MyTestBottomCommand => myTestBottomCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => TurnDirectionSingle(LeftTopRightBottomType.Bottom))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ExecuteOnBackgroundThread_ParameterValues_Multi()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand("MyTestLeft", ParameterValues = [LeftTopRightBottomType.Left, 1], ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                [RelayCommand("MyTestTop", ParameterValues = [LeftTopRightBottomType.Top, 1], ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                [RelayCommand("MyTestRight", ParameterValues = [LeftTopRightBottomType.Right, 1], ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                [RelayCommand("MyTestBottom", ParameterValues = [LeftTopRightBottomType.Bottom, 1], ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                public void TurnDirectionSingle(LeftTopRightBottomType leftTopRightBottomType, int steps)
                {
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand? myTestLeftCommand;
                private IRelayCommand? myTestTopCommand;
                private IRelayCommand? myTestRightCommand;
                private IRelayCommand? myTestBottomCommand;
            
                public IRelayCommand MyTestLeftCommand => myTestLeftCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => TurnDirectionSingle(LeftTopRightBottomType.Left, 1))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            
                public IRelayCommand MyTestTopCommand => myTestTopCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => TurnDirectionSingle(LeftTopRightBottomType.Top, 1))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            
                public IRelayCommand MyTestRightCommand => myTestRightCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => TurnDirectionSingle(LeftTopRightBottomType.Right, 1))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            
                public IRelayCommand MyTestBottomCommand => myTestBottomCommand ??= new RelayCommand(
                    () =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => TurnDirectionSingle(LeftTopRightBottomType.Bottom, 1))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    });
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RelayCommand_AutoSetIsBusy_ExecuteOnBackgroundThread_NoParameter_MultiHandlerParameterValues_CanExecute_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSave), ExecuteOnBackgroundThread = true, AutoSetIsBusy = true)]
                public void Save(
                    string val1,
                    int val2,
                    bool val3,
                    Atc.Data.Models.LogItem logItem,
                    CancellationToken cancellationToken)
                {
                    await Task.Delay(1, cancellationToken).ConfigureAwait(false);
                }

                public bool CanSave(
                    string val1,
                    int val2,
                    bool val3,
                    Atc.Data.Models.LogItem logItem)
                {
                    return true;
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommand<(string, int, bool, Atc.Data.Models.LogItem)>? saveCommand;

                public IRelayCommand<(string, int, bool, Atc.Data.Models.LogItem)> SaveCommand => saveCommand ??= new RelayCommand<(string, int, bool, Atc.Data.Models.LogItem)>(
                    x =>
                    {
                        Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = true);

                        try
                        {
                            _ = Task
                                .Run(() => Save(x.Item1, x.Item2, x.Item3, x.Item4, CancellationToken.None))
                                .ConfigureAwait(false);
                        }
                        finally
                        {
                            Application.Current.Dispatcher.InvokeIfRequired(() => IsBusy = false);
                        }
                    },
                    x => CanSave(x.Item1, x.Item2, x.Item3, x.Item4));
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}