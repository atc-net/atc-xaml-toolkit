namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class ViewModelGeneratorTests
{
    [Fact]
    public void AsyncRelayCommand_SupportsCancellation_NoParameter_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(SupportsCancellation = true)]
                private async Task Process(CancellationToken cancellationToken)
                {
                    await Task.Delay(1000, cancellationToken);
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommandAsync? processCommand;

                public IRelayCommandAsync ProcessCommand => processCommand ??= new RelayCommandAsync((System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>)Process);

                public void CancelProcess()
                {
                    ProcessCommand.Cancel();
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AsyncRelayCommand_SupportsCancellation_NoParameter_CanExecute_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanProcess), SupportsCancellation = true)]
                private async Task Process(CancellationToken cancellationToken)
                {
                    await Task.Delay(1000, cancellationToken);
                }

                private bool CanProcess() => true;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommandAsync? processCommand;

                public IRelayCommandAsync ProcessCommand => processCommand ??= new RelayCommandAsync(
                    (System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>)Process,
                    CanProcess);

                public void CancelProcess()
                {
                    ProcessCommand.Cancel();
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AsyncRelayCommand_SupportsCancellation_ParameterString_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(SupportsCancellation = true)]
                private async Task Search(string query, CancellationToken cancellationToken)
                {
                    await Task.Delay(1000, cancellationToken);
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommandAsync<string>? searchCommand;

                public IRelayCommandAsync<string> SearchCommand => searchCommand ??= new RelayCommandAsync<string>((System.Func<string, System.Threading.CancellationToken, System.Threading.Tasks.Task>)Search);

                public void CancelSearch()
                {
                    SearchCommand.Cancel();
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AsyncRelayCommand_SupportsCancellation_ParameterString_CanExecute_CancellationToken()
    {
        const string inputCode =
            """
            using System.Threading;
            using System.Threading.Tasks;
            using Atc.XamlToolkit;
            using Atc.XamlToolkit.Mvvm;

            namespace TestNamespace

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanSearch), SupportsCancellation = true)]
                private async Task Search(string query, CancellationToken cancellationToken)
                {
                    await Task.Delay(1000, cancellationToken);
                }

                private bool CanSearch(string query) => !string.IsNullOrEmpty(query);
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommandAsync<string>? searchCommand;

                public IRelayCommandAsync<string> SearchCommand => searchCommand ??= new RelayCommandAsync<string>(
                    (System.Func<string, System.Threading.CancellationToken, System.Threading.Tasks.Task>)Search,
                    CanSearch);

                public void CancelSearch()
                {
                    SearchCommand.Cancel();
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AsyncRelayCommand_SupportsCancellation_ExecuteOnBackgroundThread_NoParameter_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(ExecuteOnBackgroundThread = true, SupportsCancellation = true)]
                private async Task Process(CancellationToken cancellationToken)
                {
                    await Task.Delay(1000, cancellationToken);
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommandAsync? processCommand;

                public IRelayCommandAsync ProcessCommand => processCommand ??= new RelayCommandAsync(
                    (System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>)Process);

                public void CancelProcess()
                {
                    ProcessCommand.Cancel();
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AsyncRelayCommand_SupportsCancellation_ExecuteOnBackgroundThread_NoParameter_CanExecute_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(CanExecute = nameof(CanProcess), ExecuteOnBackgroundThread = true, SupportsCancellation = true)]
                private async Task Process(CancellationToken cancellationToken)
                {
                    await Task.Delay(1000, cancellationToken);
                }

                private bool CanProcess() => true;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommandAsync? processCommand;

                public IRelayCommandAsync ProcessCommand => processCommand ??= new RelayCommandAsync(
                    (System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>)Process,
                    CanProcess);

                public void CancelProcess()
                {
                    ProcessCommand.Cancel();
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AsyncRelayCommand_SupportsCancellation_ParameterInt_CancellationToken()
    {
        const string inputCode =
            """
            namespace TestNamespace

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(SupportsCancellation = true)]
                private async Task Process(int value, CancellationToken cancellationToken)
                {
                    await Task.Delay(value, cancellationToken);
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommandAsync<int>? processCommand;

                public IRelayCommandAsync<int> ProcessCommand => processCommand ??= new RelayCommandAsync<int>((System.Func<int, System.Threading.CancellationToken, System.Threading.Tasks.Task>)Process);

                public void CancelProcess()
                {
                    ProcessCommand.Cancel();
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AsyncRelayCommand_SupportsCancellation_NoParameter_WithoutCancellationTokenParameter()
    {
        const string inputCode =
            """
            namespace TestNamespace

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(SupportsCancellation = true)]
                private async Task Process()
                {
                    await Task.Delay(1000);
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommandAsync? processCommand;

                public IRelayCommandAsync ProcessCommand => processCommand ??= new RelayCommandAsync(async (ct) => await Process());

                public void CancelProcess()
                {
                    ProcessCommand.Cancel();
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void AsyncRelayCommand_SupportsCancellation_ParameterString_WithoutCancellationTokenParameter()
    {
        const string inputCode =
            """
            namespace TestNamespace

            public partial class TestViewModel : ViewModelBase
            {
                [RelayCommand(SupportsCancellation = true)]
                private async Task Search(string query)
                {
                    await Task.Delay(1000);
                }
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class TestViewModel
            {
                private IRelayCommandAsync<string>? searchCommand;

                public IRelayCommandAsync<string> SearchCommand => searchCommand ??= new RelayCommandAsync<string>(async (x, ct) => await Search(x));

                public void CancelSearch()
                {
                    SearchCommand.Cancel();
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}