namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class FrameworkElementGeneratorTests
{
    [Fact]
    public void RoutedEvent()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class CustomButton : Button
            {
                [RoutedEvent(RoutingStrategy.Bubble)]
                private static readonly RoutedEvent tap;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class CustomButton
            {
                public static readonly RoutedEvent TapEvent = EventManager.RegisterRoutedEvent(
                    name: nameof(Tap),
                    routingStrategy: RoutingStrategy.Bubble,
                    handlerType: typeof(RoutedEventHandler),
                    ownerType: typeof(CustomButton));
            
                public event RoutedEventHandler Tap
                {
                    add => AddHandler(TapEvent, value);
                    remove => RemoveHandler(TapEvent, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RoutedEvent_WithUnderscore()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class CustomButton : Button
            {
                [RoutedEvent(RoutingStrategy.Bubble)]
                private static readonly RoutedEvent _tap;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class CustomButton
            {
                public static readonly RoutedEvent TapEvent = EventManager.RegisterRoutedEvent(
                    name: nameof(Tap),
                    routingStrategy: RoutingStrategy.Bubble,
                    handlerType: typeof(RoutedEventHandler),
                    ownerType: typeof(CustomButton));
            
                public event RoutedEventHandler Tap
                {
                    add => AddHandler(TapEvent, value);
                    remove => RemoveHandler(TapEvent, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void RoutedEvent_Invalid_Accessor()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class CustomButton : Button
            {
                [RoutedEvent(RoutingStrategy.Bubble)]
                public static readonly RoutedEvent tap;
            }
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void RoutedEvent_Invalid_Upper()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class CustomButton : Button
            {
                [RoutedEvent(RoutingStrategy.Bubble)]
                private static readonly RoutedEvent Tap;
            }
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void RoutedEvent_Invalid_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class CustomButton : Button
            {
                [RoutedEvent(RoutingStrategy.Bubble)]
                private static readonly RoutedEvent tapEvent;
            }
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void RoutedEvent_HandlerType()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class CustomButton : Button
            {
                [RoutedEvent(HandlerType = typeof(CustomButtonChangedRoutedEventHandler))]
                private static readonly RoutedEvent valueIncremented
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class CustomButton
            {
                public static readonly RoutedEvent ValueIncrementedEvent = EventManager.RegisterRoutedEvent(
                    name: nameof(ValueIncremented),
                    routingStrategy: RoutingStrategy.Bubble,
                    handlerType: typeof(CustomButtonChangedRoutedEventHandler),
                    ownerType: typeof(CustomButton));

                public event CustomButtonChangedRoutedEventHandler ValueIncremented
                {
                    add => AddHandler(ValueIncrementedEvent, value);
                    remove => RemoveHandler(ValueIncrementedEvent, value);
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<FrameworkElementGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}