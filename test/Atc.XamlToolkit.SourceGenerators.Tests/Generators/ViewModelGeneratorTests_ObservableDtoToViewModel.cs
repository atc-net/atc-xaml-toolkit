namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class ViewModelGeneratorTests
{
    [Fact]
    public void ObservableDtoViewModel_Class_Person()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public class Person
             {
                 public string? FirstName { get; set; }

                 public string? LastName { get; set; }

                 public int? Age { get; set; }
             }

             [ObservableDtoViewModel(typeof(Person))]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private readonly global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public global::TestNamespace.Person InnerModel => dto;

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto.FirstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto.LastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                        IsDirty = true;
                    }
                }

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Record_Person()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public record Person(
                string? FirstName,
                string? LastName,
                int? Age);

             [ObservableDtoViewModel(typeof(Person))]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public global::TestNamespace.Person InnerModel => dto;

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto = dto with { FirstName = value };
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto = dto with { LastName = value };
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto = dto with { Age = value };
                        RaisePropertyChanged(nameof(Age));
                        IsDirty = true;
                    }
                }

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Record_Person_WithRegularProperty()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public record Person(
                 string? FirstName,
                 string? LastName)
             {
                 public int? Age { get; set; }
             };

             [ObservableDtoViewModel(typeof(Person))]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public global::TestNamespace.Person InnerModel => dto;

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto = dto with { FirstName = value };
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto = dto with { LastName = value };
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                        IsDirty = true;
                    }
                }

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Record_Person_WithRegularReadonlyProperty()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public record Person(
                 string? FirstName,
                 string? LastName)
             {
                 public int? Age { get; }
             };

             [ObservableDtoViewModel(typeof(Person))]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public global::TestNamespace.Person InnerModel => dto;

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto = dto with { FirstName = value };
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto = dto with { LastName = value };
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                public int? Age => dto.Age;

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Class_Person_WithToString()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public class Person
             {
                 public string? FirstName { get; set; }

                 public string? LastName { get; set; }

                 public int? Age { get; set; }

                 public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}";
             }

             [ObservableDtoViewModel(typeof(Person))]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private readonly global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public global::TestNamespace.Person InnerModel => dto;

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto.FirstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto.LastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                        IsDirty = true;
                    }
                }

                public override string ToString()
                    => dto?.ToString() ?? base.ToString();
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Class_Person_DoNotUse_IsDirty()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public class Person
             {
                 public string? FirstName { get; set; }

                 public string? LastName { get; set; }

                 public int? Age { get; set; }
             }

             [ObservableDtoViewModel(typeof(Person), UseIsDirty = false)]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private readonly global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public global::TestNamespace.Person InnerModel => dto;

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto.FirstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto.LastName = value;
                        RaisePropertyChanged(nameof(LastName));
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                    }
                }

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Class_Person_WithMethods()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public class Person
             {
                 public string? FirstName { get; set; }

                 public string? LastName { get; set; }

                 public int? Age { get; set; }

                 public string GetFullName(int testNumber, string testString)
                 {
                     return $"{FirstName} {LastName} - {testNumber}, {testString}";
                 }
             }

             [ObservableDtoViewModel(typeof(Person))]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private readonly global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public global::TestNamespace.Person InnerModel => dto;

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto.FirstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto.LastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                        IsDirty = true;
                    }
                }

                public string GetFullName(int testNumber, string testString)
                    => dto.GetFullName(testNumber, testString);

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Class_Person_WithIgnoreProperties()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public class Person
             {
                 public string? FirstName { get; set; }

                 public string? LastName { get; set; }

                 public int? Age { get; set; }

                 public string GetFullName(int testNumber, string testString)
                 {
                     return $"{FirstName} {LastName} - {testNumber}, {testString}";
                 }
             }

             [ObservableDtoViewModel(typeof(Person), IgnorePropertyNames = [nameof(Person.Age)])]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private readonly global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public global::TestNamespace.Person InnerModel => dto;

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto.FirstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto.LastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                public string GetFullName(int testNumber, string testString)
                    => dto.GetFullName(testNumber, testString);

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Class_Person_WithIgnoreMethods()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public class Person
             {
                 public string? FirstName { get; set; }

                 public string? LastName { get; set; }

                 public int? Age { get; set; }

                 public string GetFullName(int testNumber, string testString)
                 {
                     return $"{FirstName} {LastName} - {testNumber}, {testString}";
                 }
             }

             [ObservableDtoViewModel(typeof(Person), IgnoreMethodNames = [nameof(Person.GetFullName)])]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private readonly global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public global::TestNamespace.Person InnerModel => dto;

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto.FirstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto.LastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                        IsDirty = true;
                    }
                }

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Class_Person_WithValidation()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public class Person
             {
                [Required(ErrorMessage = "First name is required")]
                [MinLength(2, ErrorMessage = "First name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
                public string? FirstName { get; set; }

                [Required(ErrorMessage = "Last name is required")]
                [MinLength(2, ErrorMessage = "Last name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
                public string? LastName { get; set; }

                [Required(ErrorMessage = "Age is required")]
                [Range(18, 120, ErrorMessage = "Age must be between 18 and 120")]
                public int? Age { get; set; }
             }

             [ObservableDtoViewModel(
                 typeof(Person),
                 EnableValidationOnInit = true,
                 EnableValidationOnPropertyChanged = true)]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private readonly global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;

                    InitializeValidation(
                        validateOnPropertyChanged: true,
                        validateAllPropertiesOnInit: true);
                }

                public global::TestNamespace.Person InnerModel => dto;

                [Required(ErrorMessage = "First name is required")]
                [MinLength(2, ErrorMessage = "First name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto.FirstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                [Required(ErrorMessage = "Last name is required")]
                [MinLength(2, ErrorMessage = "Last name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto.LastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                [Required(ErrorMessage = "Age is required")]
                [Range(18, 120, ErrorMessage = "Age must be between 18 and 120")]
                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                        IsDirty = true;
                    }
                }

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Class_Person_WithCustom_PropertyAndCommand()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public class Person
             {
                [Required(ErrorMessage = "First name is required")]
                [MinLength(2, ErrorMessage = "First name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
                public string? FirstName { get; set; }

                [Required(ErrorMessage = "Last name is required")]
                [MinLength(2, ErrorMessage = "Last name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
                public string? LastName { get; set; }

                [Required(ErrorMessage = "Age is required")]
                [Range(18, 120, ErrorMessage = "Age must be between 18 and 120")]
                public int? Age { get; set; }
             }

             [ObservableDtoViewModel(
                 typeof(Person),
                 EnableValidationOnInit = true,
                 EnableValidationOnPropertyChanged = true)]
             public partial class PersonViewModel : ViewModelBase
             {
                 [ObservableProperty]
                 private string halloName;

                 [RelayCommand]
                 public void Save()
                 {
                 }
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable
            using Atc.XamlToolkit.Command;

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private readonly global::TestNamespace.Person dto;

                private IRelayCommand? saveCommand;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;

                    InitializeValidation(
                        validateOnPropertyChanged: true,
                        validateAllPropertiesOnInit: true);
                }

                public IRelayCommand SaveCommand => saveCommand ??= new RelayCommand(Save);

                public global::TestNamespace.Person InnerModel => dto;

                [Required(ErrorMessage = "First name is required")]
                [MinLength(2, ErrorMessage = "First name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto.FirstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        IsDirty = true;
                    }
                }

                [Required(ErrorMessage = "Last name is required")]
                [MinLength(2, ErrorMessage = "Last name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto.LastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        IsDirty = true;
                    }
                }

                [Required(ErrorMessage = "Age is required")]
                [Range(18, 120, ErrorMessage = "Age must be between 18 and 120")]
                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                        IsDirty = true;
                    }
                }

                public string HalloName
                {
                    get => halloName;
                    set
                    {
                        if (halloName == value)
                        {
                            return;
                        }

                        halloName = value;
                        RaisePropertyChanged(nameof(HalloName));
                        IsDirty = true;
                    }
                }

                public override string ToString()
                    => $"{nameof(FirstName)}: {FirstName}, {nameof(LastName)}: {LastName}, {nameof(Age)}: {Age}, {nameof(HalloName)}: {HalloName}";
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}