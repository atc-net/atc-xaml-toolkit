namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class ViewModelGeneratorTests
{
    [Fact]
    public void ObservableDtoViewModel_Class_Person()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public class Person
             {
                 public string? FirstName { get; set; }

                 public string? LastName { get; set; }

                 public int? Age { get; set; }
             }

             [ObservableDtoViewModel(typeof(Person))]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private readonly global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto.FirstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto.LastName = value;
                        RaisePropertyChanged(nameof(LastName));
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Record_Person()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public record Person(
                string? FirstName,
                string? LastName,
                int? Age);

             [ObservableDtoViewModel(typeof(Person))]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto = dto with { FirstName = value };
                        RaisePropertyChanged(nameof(FirstName));
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto = dto with { LastName = value };
                        RaisePropertyChanged(nameof(LastName));
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto = dto with { Age = value };
                        RaisePropertyChanged(nameof(Age));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableDtoViewModel_Record_Person_WithRegularProperty()
    {
        const string inputCode =
            """
             namespace TestNamespace;

             public record Person(
                 string? FirstName,
                 string? LastName)
             {
                 public int? Age { get; set; }
             };

             [ObservableDtoViewModel(typeof(Person))]
             public partial class PersonViewModel : ViewModelBase
             {
             }
             """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                private global::TestNamespace.Person dto;

                public PersonViewModel(global::TestNamespace.Person dto)
                {
                    this.dto = dto;
                }

                public string? FirstName
                {
                    get => dto.FirstName;
                    set
                    {
                        if (dto.FirstName == value)
                        {
                            return;
                        }

                        dto = dto with { FirstName = value };
                        RaisePropertyChanged(nameof(FirstName));
                    }
                }

                public string? LastName
                {
                    get => dto.LastName;
                    set
                    {
                        if (dto.LastName == value)
                        {
                            return;
                        }

                        dto = dto with { LastName = value };
                        RaisePropertyChanged(nameof(LastName));
                    }
                }

                public int? Age
                {
                    get => dto.Age;
                    set
                    {
                        if (dto.Age == value)
                        {
                            return;
                        }

                        dto.Age = value;
                        RaisePropertyChanged(nameof(Age));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ObservableDtoViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}