namespace Atc.XamlToolkit.SourceGenerators.Tests.Generators;

[SuppressMessage("Design", "MA0048:File name must match type name", Justification = "OK.")]
public sealed partial class ViewModelGeneratorTests
{
    [Fact]
    public void ObservableProperty_Name()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        name = value;
                        RaisePropertyChanged(nameof(Name));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_WithUnderscore()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty]
                private string _name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => _name;
                    set
                    {
                        if (_name == value)
                        {
                            return;
                        }

                        _name = value;
                        RaisePropertyChanged(nameof(Name));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_Invalid_Accessor()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty]
                public string name;
            }
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_Invalid_Upper()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty]
                private string Name;
            }
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultIsEmpty(generatorResult);
    }

    [Fact]
    public void ObservableProperty_CustomName()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty("MyName")]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string MyName
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        name = value;
                        RaisePropertyChanged(nameof(MyName));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_SealedAccessor()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public sealed partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        name = value;
                        RaisePropertyChanged(nameof(Name));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_Use_IsDirty()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(UseIsDirty = true)]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        name = value;
                        RaisePropertyChanged(nameof(Name));
                        IsDirty = true;
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_MainWindowViewModel()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public sealed partial class MainWindowViewModel : MainWindowViewModelBase
            {
                private readonly ILogger<MainWindowViewModel> logger;
                private BitmapImage? icon;

                public MainWindowViewModel(
                    ILogger<MainWindowViewModel> logger,
                    StatusBarViewModel statusBarViewModel,
                    IOptions<BasicApplicationOptions> applicationOptions)
                {
                    this.logger = logger;

                    Test = "Hello World";
                }

                [ObservableProperty]
                private string? name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class MainWindowViewModel
            {
                public string? Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        name = value;
                        RaisePropertyChanged(nameof(Name));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperties_With_NotifyPropertiesChangedFor()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class PersonViewModel : ViewModelBase
            {
                [ObservableProperty]
                [NotifyPropertyChangedFor(nameof(FullName))]
                private string firstName = string.Empty;

                [ObservableProperty]
                [NotifyPropertyChangedFor(nameof(FullName), nameof(Age))]
                [NotifyPropertyChangedFor(nameof(Email))]
                [NotifyPropertyChangedFor(nameof(TheProperty))]
                private string? lastName;

                [ObservableProperty]
                private int? age;

                [ObservableProperty]
                private string? email;

                [ObservableProperty("TheProperty", nameof(FullName), nameof(Age))]
                private string? myTestProperty;

                public string FullName => $"{FirstName} {LastName}";
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class PersonViewModel
            {
                public string FirstName
                {
                    get => firstName;
                    set
                    {
                        if (firstName == value)
                        {
                            return;
                        }

                        firstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        RaisePropertyChanged(nameof(FullName));
                    }
                }

                public string? LastName
                {
                    get => lastName;
                    set
                    {
                        if (lastName == value)
                        {
                            return;
                        }

                        lastName = value;
                        RaisePropertyChanged(nameof(LastName));
                        RaisePropertyChanged(nameof(FullName));
                        RaisePropertyChanged(nameof(Age));
                        RaisePropertyChanged(nameof(Email));
                        RaisePropertyChanged(nameof(TheProperty));
                    }
                }

                public int? Age
                {
                    get => age;
                    set
                    {
                        if (age == value)
                        {
                            return;
                        }

                        age = value;
                        RaisePropertyChanged(nameof(Age));
                    }
                }

                public string? Email
                {
                    get => email;
                    set
                    {
                        if (email == value)
                        {
                            return;
                        }

                        email = value;
                        RaisePropertyChanged(nameof(Email));
                    }
                }

                public string? TheProperty
                {
                    get => myTestProperty;
                    set
                    {
                        if (myTestProperty == value)
                        {
                            return;
                        }

                        myTestProperty = value;
                        RaisePropertyChanged(nameof(TheProperty));
                        RaisePropertyChanged(nameof(FullName));
                        RaisePropertyChanged(nameof(Age));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_DependentProperties_NotifyPropertyChangedFor()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(DependentPropertyNames = [nameof(IsReady1), nameof(IsReady2)])]
                [NotifyPropertyChangedFor(nameof(IsReady3), nameof(IsReady4))]
                private IDictionary<string, string> names;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public IDictionary<string, string> Names
                {
                    get => names;
                    set
                    {
                        if (names == value)
                        {
                            return;
                        }

                        names = value;
                        RaisePropertyChanged(nameof(Names));
                        RaisePropertyChanged(nameof(IsReady1));
                        RaisePropertyChanged(nameof(IsReady2));
                        RaisePropertyChanged(nameof(IsReady3));
                        RaisePropertyChanged(nameof(IsReady4));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_DependentCommands_NotifyPropertyChangedFor()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(DependentCommandNames = [nameof(SaveCommand)])]
                [NotifyPropertyChangedFor(nameof(FullName))]
                private string firstName = "John";
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string FirstName
                {
                    get => firstName;
                    set
                    {
                        if (firstName == value)
                        {
                            return;
                        }

                        firstName = value;
                        RaisePropertyChanged(nameof(FirstName));
                        RaisePropertyChanged(nameof(FullName));
                        SaveCommand.RaiseCanExecuteChanged();
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_BroadcastOnChange()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(BroadcastOnChange = true)]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        var oldValue = name;
                        name = value;
                        RaisePropertyChanged(nameof(Name));
                        Broadcast(nameof(Name), oldValue, value);
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_BeforeChangedCallback_Invoke()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(BeforeChangedCallback = "EntrySelected?.Invoke(this, selectedEntry);")]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        EntrySelected?.Invoke(this, selectedEntry);

                        name = value;
                        RaisePropertyChanged(nameof(Name));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_BeforeChangedCallback_Method()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(BeforeChangedCallback = "DoStuff();")]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        DoStuff();

                        name = value;
                        RaisePropertyChanged(nameof(Name));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_BeforeChangedCallback_Block()
    {
        const string inputCode =
            """"
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(BeforeChangedCallback = """
                                                            ToolTip = state == OnOffType.None
                                                                ? "?Unknown state"
                                                                : $"?Last updated: {DateTime.Now}";
                                                           """)]
                private OnOffType state;

                [ObservableProperty]
                private string toolTip;
            }
            """";

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public OnOffType State
                {
                    get => state;
                    set
                    {
                        if (state == value)
                        {
                            return;
                        }

                        ToolTip = state == OnOffType.None
                            ? "?Unknown state"
                            : $"?Last updated: {DateTime.Now}";

                        state = value;
                        RaisePropertyChanged(nameof(State));
                    }
                }

                public string ToolTip
                {
                    get => toolTip;
                    set
                    {
                        if (toolTip == value)
                        {
                            return;
                        }

                        toolTip = value;
                        RaisePropertyChanged(nameof(ToolTip));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_AfterChangedCallback_Invoke()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(AfterChangedCallback = "EntrySelected?.Invoke(this, selectedEntry);")]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        name = value;
                        RaisePropertyChanged(nameof(Name));

                        EntrySelected?.Invoke(this, selectedEntry);
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_AfterChangedCallback_Method()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(AfterChangedCallback = nameof(DoStuff))]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        name = value;
                        RaisePropertyChanged(nameof(Name));

                        DoStuff();
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_AfterChangedCallback_Block()
    {
        const string inputCode =
            """"
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(AfterChangedCallback = """
                                                           ToolTip = state == OnOffType.None
                                                                ? "?Unknown state"
                                                                : $"?Last updated: {DateTime.Now}";
                                                           """)]
                private OnOffType state;

                [ObservableProperty]
                private string toolTip;
            }
            """";

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public OnOffType State
                {
                    get => state;
                    set
                    {
                        if (state == value)
                        {
                            return;
                        }

                        state = value;
                        RaisePropertyChanged(nameof(State));

                        ToolTip = state == OnOffType.None
                             ? "?Unknown state"
                             : $"?Last updated: {DateTime.Now}";
                    }
                }

                public string ToolTip
                {
                    get => toolTip;
                    set
                    {
                        if (toolTip == value)
                        {
                            return;
                        }

                        toolTip = value;
                        RaisePropertyChanged(nameof(ToolTip));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_BeforeChangedCallback_AfterChangedCallback()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(BeforeChangedCallback = "DoStuffA();", AfterChangedCallback = "EntrySelected?.Invoke(this, selectedEntry); DoStuffB();")]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        DoStuffA();

                        name = value;
                        RaisePropertyChanged(nameof(Name));

                        EntrySelected?.Invoke(this, selectedEntry);
                        DoStuffB();
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_BeforeChangedCallback_AfterChangedCallback_NameofMethod()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty(BeforeChangedCallback = nameof(DoStuffA), AfterChangedCallback = nameof(DoStuffB))]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        DoStuffA();

                        name = value;
                        RaisePropertyChanged(nameof(Name));

                        DoStuffB();
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_WithCustomAttributes()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                [ObservableProperty]
                [Required(ErrorMessage = "Name is required")]
                [MinLength(2, ErrorMessage = "Name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "Name cannot exceed 50 characters")]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                [Required(ErrorMessage = "Name is required")]
                [MinLength(2, ErrorMessage = "Name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "Name cannot exceed 50 characters")]
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        name = value;
                        RaisePropertyChanged(nameof(Name));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }

    [Fact]
    public void ObservableProperty_Name_WithCustomAttributes_And_CodeDocumentation()
    {
        const string inputCode =
            """
            namespace TestNamespace;

            public partial class TestViewModel : ViewModelBase
            {
                /// <summary>
                /// Gets or sets the name.
                /// </summary>
                /// <remarks>The name is great.</remarks>
                [ObservableProperty]
                [Required(ErrorMessage = "Name is required")]
                [MinLength(2, ErrorMessage = "Name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "Name cannot exceed 50 characters")]
                private string name;
            }
            """;

        const string expectedCode =
            """
            // <auto-generated>
            #nullable enable

            namespace TestNamespace;

            public partial class TestViewModel
            {
                /// <summary>
                /// Gets or sets the name.
                /// </summary>
                /// <remarks>The name is great.</remarks>
                [Required(ErrorMessage = "Name is required")]
                [MinLength(2, ErrorMessage = "Name must be at least 2 characters long")]
                [MaxLength(50, ErrorMessage = "Name cannot exceed 50 characters")]
                public string Name
                {
                    get => name;
                    set
                    {
                        if (name == value)
                        {
                            return;
                        }

                        name = value;
                        RaisePropertyChanged(nameof(Name));
                    }
                }
            }

            #nullable disable
            """;

        var generatorResult = RunGenerator<ViewModelGenerator>(inputCode);

        AssertGeneratorRunResultAsEqual(expectedCode, generatorResult);
    }
}